libs =
import libs += libboost-json%lib{boost_json}

./: exe{pch-example}

libul{pch_deps}: $libs

#pch_base_name = test_pch
#pch_h_name = "$pch_base_name".h

# ad hoc recipe to generate the pch
<file{test_pch.pch} obja{test_pch.obj}>: cxx{test_pch} hxx{test_pch} libus{pch_deps}
{{
  s = $path($<[0])
  opch = $path($>[0])
  oo = $path($>[1])

  # Grab poptions from dependencies so the pch #includes can be resolved
  lib_poptions = $cxx.lib_poptions(libus{pch_deps}, objs)
  depdb hash $lib_poptions

  poptions  = $cc.poptions $cxx.poptions $lib_poptions
  sys_incl_flags = $regex.apply($cxx.sys_hdr_dirs, '(.+)', '-I\1')
  poptions += $sys_incl_flags
  
  coptions  = $cc.coptions $cxx.coptions /nologo /c /TP
  # Instruct cl to create the pch
  coptions += /Yc "/Fp$opch" "/Fo$oo"

  diag c++ ($<[0])

  $cxx.path $poptions $coptions $cxx.mode $s
}}

# library used to both put a build synchronization point on creating the pch, as well as propagate the compiler flags needed to consume it.
[rule_hint=cxx] liba{pch}: file{test_pch.pch}:
{
  # tell the rule we're handling the prerequisite ourselves
  include = adhoc
  # update during match stage to ensure that the pch is created before we try to compile anything depending on it
  update = match
}

# add the pch object file into the lib so it will be linked into consuming dll/exe targets
liba{pch}: obja{test_pch}
{
  # export compiler flags for pch consumption
  cxx.export.poptions += "/Yutest_pch.hxx" "/FItest_pch.hxx" "/Fp$out_base/test_pch"
  install = false
}


exe{pch-example}: {hxx ixx txx cxx}{** -test_pch} $libs liba{pch}

cxx.poptions =+ "-I$out_root" "-I$src_root" "-I$src_base"
